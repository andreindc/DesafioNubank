package com.nubanck.infrastructure;

import com.nubanck.application.AuthorizeTransaction;
import com.nubanck.application.CreateAccount;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * @desc This class is in charge of receiving and formatting the user's input data and sending it to the CreateAccount and AuthorizeTransaction classes,
 * who will send a response back to the user.
 * @author Andreina DÃ­az andreinadc@gmail.com
 */
public class ControllerData {
    private CreateAccount createAccount;
    private AuthorizeTransaction authorizeTransaction;

    /**
     * @desc Class constructor
     */
    public ControllerData() {
        this.authorizeTransaction = new AuthorizeTransaction();
        this.createAccount = new CreateAccount();
    }

    /**
     * @desc Receive an input from the user account
     * @return String - json of input account
     */
    private String InputAccount() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print(" Account: ");
        return ((reader.readLine())
                .replace("active-card", "activeCard")
                .replace("available-limit", "availableLimit"));
    }

    /**
     * @desc Receive an input from the user transaction
     * @return String - json of input transaction
     */
    private String InputTransaction() throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print(" Transaction: ");
        return (reader.readLine());
    }

    /**
     * @desc Decodes the json generated by the class and displays it by the console in the expected format
     * @param String jsonOutputAccount - json of output transaction
     */
    public void PrintAccount(String jsonOutputAccount) throws IOException {
        if(!jsonOutputAccount.equals(null)){
            System.out.println(jsonOutputAccount
                    .replace("activeCard", "active-card")
                    .replace("activeCard", "available-limit"));
        }
    }

    /**
     * @desc Invoke the PrintConta method
     */
    public void Create() throws IOException {
        PrintAccount(this.createAccount.execute(InputAccount()));

    }

    /**
     * @desc Invoke the PrintConta method
     */
    public void Authorize() throws IOException {
        PrintAccount(this.authorizeTransaction.execute(createAccount.getInputAccount(),InputTransaction()));
    }

}
